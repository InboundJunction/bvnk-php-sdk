<?php
/**
 * MerchantChannelPayment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MerchantChannelPayment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantChannelPayment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantChannelPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channel_id' => 'string',
        'merchant_id' => 'string',
        'merchant_display_name' => 'string',
        'reference' => 'string',
        'date_created' => 'int',
        'last_updated' => 'int',
        'status' => 'string',
        'uuid' => 'string',
        'hash' => 'string',
        'address' => 'string',
        'tag' => 'string',
        'paid_currency' => 'string',
        'display_currency' => 'string',
        'wallet_currency' => 'string',
        'fee_currency' => 'string',
        'paid_amount' => 'float',
        'display_amount' => 'float',
        'wallet_amount' => 'float',
        'fee_amount' => 'float',
        'exchange_rate' => '\OpenAPI\Client\Model\ExchangeRateDto',
        'display_rate' => '\OpenAPI\Client\Model\ExchangeRateDto',
        'risk' => '\OpenAPI\Client\Model\ExchangeRateDto',
        'sources' => 'string[]',
        'network_fee' => '\OpenAPI\Client\Model\NetworkFee'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channel_id' => null,
        'merchant_id' => null,
        'merchant_display_name' => null,
        'reference' => null,
        'date_created' => 'int64',
        'last_updated' => 'int64',
        'status' => null,
        'uuid' => null,
        'hash' => null,
        'address' => null,
        'tag' => null,
        'paid_currency' => null,
        'display_currency' => null,
        'wallet_currency' => null,
        'fee_currency' => null,
        'paid_amount' => null,
        'display_amount' => null,
        'wallet_amount' => null,
        'fee_amount' => null,
        'exchange_rate' => null,
        'display_rate' => null,
        'risk' => null,
        'sources' => null,
        'network_fee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channel_id' => false,
		'merchant_id' => false,
		'merchant_display_name' => false,
		'reference' => false,
		'date_created' => false,
		'last_updated' => false,
		'status' => false,
		'uuid' => false,
		'hash' => false,
		'address' => false,
		'tag' => false,
		'paid_currency' => false,
		'display_currency' => false,
		'wallet_currency' => false,
		'fee_currency' => false,
		'paid_amount' => false,
		'display_amount' => false,
		'wallet_amount' => false,
		'fee_amount' => false,
		'exchange_rate' => false,
		'display_rate' => false,
		'risk' => false,
		'sources' => false,
		'network_fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channel_id' => 'channelId',
        'merchant_id' => 'merchantId',
        'merchant_display_name' => 'merchantDisplayName',
        'reference' => 'reference',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated',
        'status' => 'status',
        'uuid' => 'uuid',
        'hash' => 'hash',
        'address' => 'address',
        'tag' => 'tag',
        'paid_currency' => 'paidCurrency',
        'display_currency' => 'displayCurrency',
        'wallet_currency' => 'walletCurrency',
        'fee_currency' => 'feeCurrency',
        'paid_amount' => 'paidAmount',
        'display_amount' => 'displayAmount',
        'wallet_amount' => 'walletAmount',
        'fee_amount' => 'feeAmount',
        'exchange_rate' => 'exchangeRate',
        'display_rate' => 'displayRate',
        'risk' => 'risk',
        'sources' => 'sources',
        'network_fee' => 'networkFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channel_id' => 'setChannelId',
        'merchant_id' => 'setMerchantId',
        'merchant_display_name' => 'setMerchantDisplayName',
        'reference' => 'setReference',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated',
        'status' => 'setStatus',
        'uuid' => 'setUuid',
        'hash' => 'setHash',
        'address' => 'setAddress',
        'tag' => 'setTag',
        'paid_currency' => 'setPaidCurrency',
        'display_currency' => 'setDisplayCurrency',
        'wallet_currency' => 'setWalletCurrency',
        'fee_currency' => 'setFeeCurrency',
        'paid_amount' => 'setPaidAmount',
        'display_amount' => 'setDisplayAmount',
        'wallet_amount' => 'setWalletAmount',
        'fee_amount' => 'setFeeAmount',
        'exchange_rate' => 'setExchangeRate',
        'display_rate' => 'setDisplayRate',
        'risk' => 'setRisk',
        'sources' => 'setSources',
        'network_fee' => 'setNetworkFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channel_id' => 'getChannelId',
        'merchant_id' => 'getMerchantId',
        'merchant_display_name' => 'getMerchantDisplayName',
        'reference' => 'getReference',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated',
        'status' => 'getStatus',
        'uuid' => 'getUuid',
        'hash' => 'getHash',
        'address' => 'getAddress',
        'tag' => 'getTag',
        'paid_currency' => 'getPaidCurrency',
        'display_currency' => 'getDisplayCurrency',
        'wallet_currency' => 'getWalletCurrency',
        'fee_currency' => 'getFeeCurrency',
        'paid_amount' => 'getPaidAmount',
        'display_amount' => 'getDisplayAmount',
        'wallet_amount' => 'getWalletAmount',
        'fee_amount' => 'getFeeAmount',
        'exchange_rate' => 'getExchangeRate',
        'display_rate' => 'getDisplayRate',
        'risk' => 'getRisk',
        'sources' => 'getSources',
        'network_fee' => 'getNetworkFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_DETECTED = 'DETECTED';
    public const STATUS_COMPLETE = 'COMPLETE';
    public const STATUS_UNKNOWN = 'UNKNOWN';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DETECTED,
            self::STATUS_COMPLETE,
            self::STATUS_UNKNOWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('merchant_display_name', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], 0);
        $this->setIfExists('last_updated', $data ?? [], 0);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('hash', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('paid_currency', $data ?? [], null);
        $this->setIfExists('display_currency', $data ?? [], null);
        $this->setIfExists('wallet_currency', $data ?? [], null);
        $this->setIfExists('fee_currency', $data ?? [], null);
        $this->setIfExists('paid_amount', $data ?? [], 0);
        $this->setIfExists('display_amount', $data ?? [], 0);
        $this->setIfExists('wallet_amount', $data ?? [], 0);
        $this->setIfExists('fee_amount', $data ?? [], 0);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('display_rate', $data ?? [], null);
        $this->setIfExists('risk', $data ?? [], null);
        $this->setIfExists('sources', $data ?? [], null);
        $this->setIfExists('network_fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id channel_id
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            throw new \InvalidArgumentException('non-nullable channel_id cannot be null');
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets merchant_display_name
     *
     * @return string|null
     */
    public function getMerchantDisplayName()
    {
        return $this->container['merchant_display_name'];
    }

    /**
     * Sets merchant_display_name
     *
     * @param string|null $merchant_display_name merchant_display_name
     *
     * @return self
     */
    public function setMerchantDisplayName($merchant_display_name)
    {
        if (is_null($merchant_display_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_display_name cannot be null');
        }
        $this->container['merchant_display_name'] = $merchant_display_name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return int|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param int|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string|null
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string|null $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        if (is_null($hash)) {
            throw new \InvalidArgumentException('non-nullable hash cannot be null');
        }
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag tag
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets paid_currency
     *
     * @return string|null
     */
    public function getPaidCurrency()
    {
        return $this->container['paid_currency'];
    }

    /**
     * Sets paid_currency
     *
     * @param string|null $paid_currency paid_currency
     *
     * @return self
     */
    public function setPaidCurrency($paid_currency)
    {
        if (is_null($paid_currency)) {
            throw new \InvalidArgumentException('non-nullable paid_currency cannot be null');
        }
        $this->container['paid_currency'] = $paid_currency;

        return $this;
    }

    /**
     * Gets display_currency
     *
     * @return string|null
     */
    public function getDisplayCurrency()
    {
        return $this->container['display_currency'];
    }

    /**
     * Sets display_currency
     *
     * @param string|null $display_currency display_currency
     *
     * @return self
     */
    public function setDisplayCurrency($display_currency)
    {
        if (is_null($display_currency)) {
            throw new \InvalidArgumentException('non-nullable display_currency cannot be null');
        }
        $this->container['display_currency'] = $display_currency;

        return $this;
    }

    /**
     * Gets wallet_currency
     *
     * @return string|null
     */
    public function getWalletCurrency()
    {
        return $this->container['wallet_currency'];
    }

    /**
     * Sets wallet_currency
     *
     * @param string|null $wallet_currency wallet_currency
     *
     * @return self
     */
    public function setWalletCurrency($wallet_currency)
    {
        if (is_null($wallet_currency)) {
            throw new \InvalidArgumentException('non-nullable wallet_currency cannot be null');
        }
        $this->container['wallet_currency'] = $wallet_currency;

        return $this;
    }

    /**
     * Gets fee_currency
     *
     * @return string|null
     */
    public function getFeeCurrency()
    {
        return $this->container['fee_currency'];
    }

    /**
     * Sets fee_currency
     *
     * @param string|null $fee_currency fee_currency
     *
     * @return self
     */
    public function setFeeCurrency($fee_currency)
    {
        if (is_null($fee_currency)) {
            throw new \InvalidArgumentException('non-nullable fee_currency cannot be null');
        }
        $this->container['fee_currency'] = $fee_currency;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return float|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param float|null $paid_amount paid_amount
     *
     * @return self
     */
    public function setPaidAmount($paid_amount)
    {
        if (is_null($paid_amount)) {
            throw new \InvalidArgumentException('non-nullable paid_amount cannot be null');
        }
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets display_amount
     *
     * @return float|null
     */
    public function getDisplayAmount()
    {
        return $this->container['display_amount'];
    }

    /**
     * Sets display_amount
     *
     * @param float|null $display_amount display_amount
     *
     * @return self
     */
    public function setDisplayAmount($display_amount)
    {
        if (is_null($display_amount)) {
            throw new \InvalidArgumentException('non-nullable display_amount cannot be null');
        }
        $this->container['display_amount'] = $display_amount;

        return $this;
    }

    /**
     * Gets wallet_amount
     *
     * @return float|null
     */
    public function getWalletAmount()
    {
        return $this->container['wallet_amount'];
    }

    /**
     * Sets wallet_amount
     *
     * @param float|null $wallet_amount wallet_amount
     *
     * @return self
     */
    public function setWalletAmount($wallet_amount)
    {
        if (is_null($wallet_amount)) {
            throw new \InvalidArgumentException('non-nullable wallet_amount cannot be null');
        }
        $this->container['wallet_amount'] = $wallet_amount;

        return $this;
    }

    /**
     * Gets fee_amount
     *
     * @return float|null
     */
    public function getFeeAmount()
    {
        return $this->container['fee_amount'];
    }

    /**
     * Sets fee_amount
     *
     * @param float|null $fee_amount fee_amount
     *
     * @return self
     */
    public function setFeeAmount($fee_amount)
    {
        if (is_null($fee_amount)) {
            throw new \InvalidArgumentException('non-nullable fee_amount cannot be null');
        }
        $this->container['fee_amount'] = $fee_amount;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return \OpenAPI\Client\Model\ExchangeRateDto|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param \OpenAPI\Client\Model\ExchangeRateDto|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets display_rate
     *
     * @return \OpenAPI\Client\Model\ExchangeRateDto|null
     */
    public function getDisplayRate()
    {
        return $this->container['display_rate'];
    }

    /**
     * Sets display_rate
     *
     * @param \OpenAPI\Client\Model\ExchangeRateDto|null $display_rate display_rate
     *
     * @return self
     */
    public function setDisplayRate($display_rate)
    {
        if (is_null($display_rate)) {
            throw new \InvalidArgumentException('non-nullable display_rate cannot be null');
        }
        $this->container['display_rate'] = $display_rate;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return \OpenAPI\Client\Model\ExchangeRateDto|null
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param \OpenAPI\Client\Model\ExchangeRateDto|null $risk risk
     *
     * @return self
     */
    public function setRisk($risk)
    {
        if (is_null($risk)) {
            throw new \InvalidArgumentException('non-nullable risk cannot be null');
        }
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets sources
     *
     * @return string[]|null
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     *
     * @param string[]|null $sources sources
     *
     * @return self
     */
    public function setSources($sources)
    {
        if (is_null($sources)) {
            throw new \InvalidArgumentException('non-nullable sources cannot be null');
        }
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets network_fee
     *
     * @return \OpenAPI\Client\Model\NetworkFee|null
     */
    public function getNetworkFee()
    {
        return $this->container['network_fee'];
    }

    /**
     * Sets network_fee
     *
     * @param \OpenAPI\Client\Model\NetworkFee|null $network_fee network_fee
     *
     * @return self
     */
    public function setNetworkFee($network_fee)
    {
        if (is_null($network_fee)) {
            throw new \InvalidArgumentException('non-nullable network_fee cannot be null');
        }
        $this->container['network_fee'] = $network_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


