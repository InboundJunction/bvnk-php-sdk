<?php
/**
 * QuoteRequestDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * QuoteRequestDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class QuoteRequestDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'QuoteRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from' => 'string',
        'to' => 'string',
        'from_wallet' => 'float',
        'use_minimum' => 'bool',
        'use_maximum' => 'bool',
        'to_wallet' => 'float',
        'amount_in' => 'float',
        'pay_in_method' => 'string',
        'pay_out_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from' => null,
        'to' => null,
        'from_wallet' => null,
        'use_minimum' => null,
        'use_maximum' => null,
        'to_wallet' => null,
        'amount_in' => null,
        'pay_in_method' => null,
        'pay_out_method' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from' => false,
		'to' => false,
		'from_wallet' => false,
		'use_minimum' => false,
		'use_maximum' => false,
		'to_wallet' => false,
		'amount_in' => false,
		'pay_in_method' => false,
		'pay_out_method' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'from',
        'to' => 'to',
        'from_wallet' => 'fromWallet',
        'use_minimum' => 'useMinimum',
        'use_maximum' => 'useMaximum',
        'to_wallet' => 'toWallet',
        'amount_in' => 'amountIn',
        'pay_in_method' => 'payInMethod',
        'pay_out_method' => 'payOutMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'from_wallet' => 'setFromWallet',
        'use_minimum' => 'setUseMinimum',
        'use_maximum' => 'setUseMaximum',
        'to_wallet' => 'setToWallet',
        'amount_in' => 'setAmountIn',
        'pay_in_method' => 'setPayInMethod',
        'pay_out_method' => 'setPayOutMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'from_wallet' => 'getFromWallet',
        'use_minimum' => 'getUseMinimum',
        'use_maximum' => 'getUseMaximum',
        'to_wallet' => 'getToWallet',
        'amount_in' => 'getAmountIn',
        'pay_in_method' => 'getPayInMethod',
        'pay_out_method' => 'getPayOutMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('from', $data ?? [], 'EUR');
        $this->setIfExists('to', $data ?? [], 'USDC');
        $this->setIfExists('from_wallet', $data ?? [], 3598236);
        $this->setIfExists('use_minimum', $data ?? [], false);
        $this->setIfExists('use_maximum', $data ?? [], false);
        $this->setIfExists('to_wallet', $data ?? [], 3598514);
        $this->setIfExists('amount_in', $data ?? [], 10);
        $this->setIfExists('pay_in_method', $data ?? [], 'wallet');
        $this->setIfExists('pay_out_method', $data ?? [], 'wallet');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['from'] === null) {
            $invalidProperties[] = "'from' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        if ($this->container['from_wallet'] === null) {
            $invalidProperties[] = "'from_wallet' can't be null";
        }
        if ($this->container['use_minimum'] === null) {
            $invalidProperties[] = "'use_minimum' can't be null";
        }
        if ($this->container['use_maximum'] === null) {
            $invalidProperties[] = "'use_maximum' can't be null";
        }
        if ($this->container['to_wallet'] === null) {
            $invalidProperties[] = "'to_wallet' can't be null";
        }
        if ($this->container['amount_in'] === null) {
            $invalidProperties[] = "'amount_in' can't be null";
        }
        if ($this->container['pay_in_method'] === null) {
            $invalidProperties[] = "'pay_in_method' can't be null";
        }
        if ($this->container['pay_out_method'] === null) {
            $invalidProperties[] = "'pay_out_method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from The currency to convert from.
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to The currency to convert to.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from_wallet
     *
     * @return float
     */
    public function getFromWallet()
    {
        return $this->container['from_wallet'];
    }

    /**
     * Sets from_wallet
     *
     * @param float $from_wallet The ID of the wallet converted from.
     *
     * @return self
     */
    public function setFromWallet($from_wallet)
    {
        if (is_null($from_wallet)) {
            throw new \InvalidArgumentException('non-nullable from_wallet cannot be null');
        }
        $this->container['from_wallet'] = $from_wallet;

        return $this;
    }

    /**
     * Gets use_minimum
     *
     * @return bool
     */
    public function getUseMinimum()
    {
        return $this->container['use_minimum'];
    }

    /**
     * Sets use_minimum
     *
     * @param bool $use_minimum Is converting the minimum allowed amount.
     *
     * @return self
     */
    public function setUseMinimum($use_minimum)
    {
        if (is_null($use_minimum)) {
            throw new \InvalidArgumentException('non-nullable use_minimum cannot be null');
        }
        $this->container['use_minimum'] = $use_minimum;

        return $this;
    }

    /**
     * Gets use_maximum
     *
     * @return bool
     */
    public function getUseMaximum()
    {
        return $this->container['use_maximum'];
    }

    /**
     * Sets use_maximum
     *
     * @param bool $use_maximum Is converting the max amount of the wallet.
     *
     * @return self
     */
    public function setUseMaximum($use_maximum)
    {
        if (is_null($use_maximum)) {
            throw new \InvalidArgumentException('non-nullable use_maximum cannot be null');
        }
        $this->container['use_maximum'] = $use_maximum;

        return $this;
    }

    /**
     * Gets to_wallet
     *
     * @return float
     */
    public function getToWallet()
    {
        return $this->container['to_wallet'];
    }

    /**
     * Sets to_wallet
     *
     * @param float $to_wallet The ID of the wallet converted to.
     *
     * @return self
     */
    public function setToWallet($to_wallet)
    {
        if (is_null($to_wallet)) {
            throw new \InvalidArgumentException('non-nullable to_wallet cannot be null');
        }
        $this->container['to_wallet'] = $to_wallet;

        return $this;
    }

    /**
     * Gets amount_in
     *
     * @return float
     */
    public function getAmountIn()
    {
        return $this->container['amount_in'];
    }

    /**
     * Sets amount_in
     *
     * @param float $amount_in The amount being converted.
     *
     * @return self
     */
    public function setAmountIn($amount_in)
    {
        if (is_null($amount_in)) {
            throw new \InvalidArgumentException('non-nullable amount_in cannot be null');
        }
        $this->container['amount_in'] = $amount_in;

        return $this;
    }

    /**
     * Gets pay_in_method
     *
     * @return string
     */
    public function getPayInMethod()
    {
        return $this->container['pay_in_method'];
    }

    /**
     * Sets pay_in_method
     *
     * @param string $pay_in_method The type of method in.
     *
     * @return self
     */
    public function setPayInMethod($pay_in_method)
    {
        if (is_null($pay_in_method)) {
            throw new \InvalidArgumentException('non-nullable pay_in_method cannot be null');
        }
        $this->container['pay_in_method'] = $pay_in_method;

        return $this;
    }

    /**
     * Gets pay_out_method
     *
     * @return string
     */
    public function getPayOutMethod()
    {
        return $this->container['pay_out_method'];
    }

    /**
     * Sets pay_out_method
     *
     * @param string $pay_out_method The type of method out.
     *
     * @return self
     */
    public function setPayOutMethod($pay_out_method)
    {
        if (is_null($pay_out_method)) {
            throw new \InvalidArgumentException('non-nullable pay_out_method cannot be null');
        }
        $this->container['pay_out_method'] = $pay_out_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


