<?php
/**
 * MerchantDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MerchantDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'merchant_id' => 'string',
        'display_name' => 'string',
        'secret' => 'string',
        'webhook_url' => 'string',
        'auto_convert_invalid_payments' => 'bool',
        'default_expiry_minutes' => 'int',
        'webhook_version' => 'int',
        'wallet' => '\OpenAPI\Client\Model\WalletDto',
        'email_recipients' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'merchant_id' => null,
        'display_name' => null,
        'secret' => null,
        'webhook_url' => null,
        'auto_convert_invalid_payments' => null,
        'default_expiry_minutes' => 'int32',
        'webhook_version' => 'int32',
        'wallet' => null,
        'email_recipients' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'merchant_id' => false,
		'display_name' => false,
		'secret' => false,
		'webhook_url' => false,
		'auto_convert_invalid_payments' => false,
		'default_expiry_minutes' => false,
		'webhook_version' => false,
		'wallet' => false,
		'email_recipients' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'merchant_id' => 'merchantId',
        'display_name' => 'displayName',
        'secret' => 'secret',
        'webhook_url' => 'webhookUrl',
        'auto_convert_invalid_payments' => 'autoConvertInvalidPayments',
        'default_expiry_minutes' => 'defaultExpiryMinutes',
        'webhook_version' => 'webhookVersion',
        'wallet' => 'wallet',
        'email_recipients' => 'emailRecipients'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'merchant_id' => 'setMerchantId',
        'display_name' => 'setDisplayName',
        'secret' => 'setSecret',
        'webhook_url' => 'setWebhookUrl',
        'auto_convert_invalid_payments' => 'setAutoConvertInvalidPayments',
        'default_expiry_minutes' => 'setDefaultExpiryMinutes',
        'webhook_version' => 'setWebhookVersion',
        'wallet' => 'setWallet',
        'email_recipients' => 'setEmailRecipients'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'merchant_id' => 'getMerchantId',
        'display_name' => 'getDisplayName',
        'secret' => 'getSecret',
        'webhook_url' => 'getWebhookUrl',
        'auto_convert_invalid_payments' => 'getAutoConvertInvalidPayments',
        'default_expiry_minutes' => 'getDefaultExpiryMinutes',
        'webhook_version' => 'getWebhookVersion',
        'wallet' => 'getWallet',
        'email_recipients' => 'getEmailRecipients'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('secret', $data ?? [], null);
        $this->setIfExists('webhook_url', $data ?? [], null);
        $this->setIfExists('auto_convert_invalid_payments', $data ?? [], true);
        $this->setIfExists('default_expiry_minutes', $data ?? [], null);
        $this->setIfExists('webhook_version', $data ?? [], null);
        $this->setIfExists('wallet', $data ?? [], null);
        $this->setIfExists('email_recipients', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the Merchant ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id The Merchant ID as a UUID.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name The name of the merchant displayed on the payments page.
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string|null
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string|null $secret The secret key used to validate webhooks.
     *
     * @return self
     */
    public function setSecret($secret)
    {
        if (is_null($secret)) {
            throw new \InvalidArgumentException('non-nullable secret cannot be null');
        }
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets webhook_url
     *
     * @return string|null
     */
    public function getWebhookUrl()
    {
        return $this->container['webhook_url'];
    }

    /**
     * Sets webhook_url
     *
     * @param string|null $webhook_url The webhooks URL that webhoosk are sent to.
     *
     * @return self
     */
    public function setWebhookUrl($webhook_url)
    {
        if (is_null($webhook_url)) {
            throw new \InvalidArgumentException('non-nullable webhook_url cannot be null');
        }
        $this->container['webhook_url'] = $webhook_url;

        return $this;
    }

    /**
     * Gets auto_convert_invalid_payments
     *
     * @return bool|null
     */
    public function getAutoConvertInvalidPayments()
    {
        return $this->container['auto_convert_invalid_payments'];
    }

    /**
     * Sets auto_convert_invalid_payments
     *
     * @param bool|null $auto_convert_invalid_payments Is set to auto convert invalid payments.
     *
     * @return self
     */
    public function setAutoConvertInvalidPayments($auto_convert_invalid_payments)
    {
        if (is_null($auto_convert_invalid_payments)) {
            throw new \InvalidArgumentException('non-nullable auto_convert_invalid_payments cannot be null');
        }
        $this->container['auto_convert_invalid_payments'] = $auto_convert_invalid_payments;

        return $this;
    }

    /**
     * Gets default_expiry_minutes
     *
     * @return int|null
     */
    public function getDefaultExpiryMinutes()
    {
        return $this->container['default_expiry_minutes'];
    }

    /**
     * Sets default_expiry_minutes
     *
     * @param int|null $default_expiry_minutes The default number of minutes before a payment expires for this Merchant ID.
     *
     * @return self
     */
    public function setDefaultExpiryMinutes($default_expiry_minutes)
    {
        if (is_null($default_expiry_minutes)) {
            throw new \InvalidArgumentException('non-nullable default_expiry_minutes cannot be null');
        }
        $this->container['default_expiry_minutes'] = $default_expiry_minutes;

        return $this;
    }

    /**
     * Gets webhook_version
     *
     * @return int|null
     */
    public function getWebhookVersion()
    {
        return $this->container['webhook_version'];
    }

    /**
     * Sets webhook_version
     *
     * @param int|null $webhook_version The version of webhooks sent.
     *
     * @return self
     */
    public function setWebhookVersion($webhook_version)
    {
        if (is_null($webhook_version)) {
            throw new \InvalidArgumentException('non-nullable webhook_version cannot be null');
        }
        $this->container['webhook_version'] = $webhook_version;

        return $this;
    }

    /**
     * Gets wallet
     *
     * @return \OpenAPI\Client\Model\WalletDto|null
     */
    public function getWallet()
    {
        return $this->container['wallet'];
    }

    /**
     * Sets wallet
     *
     * @param \OpenAPI\Client\Model\WalletDto|null $wallet wallet
     *
     * @return self
     */
    public function setWallet($wallet)
    {
        if (is_null($wallet)) {
            throw new \InvalidArgumentException('non-nullable wallet cannot be null');
        }
        $this->container['wallet'] = $wallet;

        return $this;
    }

    /**
     * Gets email_recipients
     *
     * @return string|null
     */
    public function getEmailRecipients()
    {
        return $this->container['email_recipients'];
    }

    /**
     * Sets email_recipients
     *
     * @param string|null $email_recipients The recipients of event emails.
     *
     * @return self
     */
    public function setEmailRecipients($email_recipients)
    {
        if (is_null($email_recipients)) {
            throw new \InvalidArgumentException('non-nullable email_recipients cannot be null');
        }
        $this->container['email_recipients'] = $email_recipients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


