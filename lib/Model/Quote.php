<?php
/**
 * Quote
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Quote Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Quote implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Quote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'from' => 'string',
        'to' => 'string',
        'amount_in' => 'float',
        'amount_due' => 'float',
        'amount_out' => 'float',
        'price' => 'float',
        'quote_status' => 'string',
        'payment_status' => 'string',
        'acceptance_expiry_date' => 'int',
        'acceptance_date' => 'int',
        'payment_expiry_date' => 'int',
        'payment_receipt_date' => 'int',
        'pay_in_legs' => '\OpenAPI\Client\Model\PaymentLeg[]',
        'pay_in_method' => '\OpenAPI\Client\Model\PayInMethod',
        'pay_out_method' => '\OpenAPI\Client\Model\PayOutMethod',
        'uuid' => 'string',
        'pay_out_instruction' => '\OpenAPI\Client\Model\PayOutInstruction',
        'pay_in_instruction' => '\OpenAPI\Client\Model\PayInInstruction',
        'use_pay_in_method' => '\OpenAPI\Client\Model\AccountMethod',
        'use_pay_out_method' => '\OpenAPI\Client\Model\AccountMethod',
        'fee' => 'float',
        'processing_fee' => 'float',
        'type' => 'string',
        'net_price' => 'float',
        'gross_price' => 'float',
        'amount_in_gross' => 'float',
        'amount_in_net' => 'float',
        'fees' => '\OpenAPI\Client\Model\Fees',
        'date_created' => 'int',
        'last_updated' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'from' => null,
        'to' => null,
        'amount_in' => null,
        'amount_due' => null,
        'amount_out' => null,
        'price' => null,
        'quote_status' => null,
        'payment_status' => null,
        'acceptance_expiry_date' => 'int64',
        'acceptance_date' => 'int64',
        'payment_expiry_date' => 'int64',
        'payment_receipt_date' => 'int64',
        'pay_in_legs' => null,
        'pay_in_method' => null,
        'pay_out_method' => null,
        'uuid' => null,
        'pay_out_instruction' => null,
        'pay_in_instruction' => null,
        'use_pay_in_method' => null,
        'use_pay_out_method' => null,
        'fee' => null,
        'processing_fee' => null,
        'type' => null,
        'net_price' => null,
        'gross_price' => null,
        'amount_in_gross' => null,
        'amount_in_net' => null,
        'fees' => null,
        'date_created' => 'int64',
        'last_updated' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'from' => false,
		'to' => false,
		'amount_in' => false,
		'amount_due' => false,
		'amount_out' => false,
		'price' => false,
		'quote_status' => false,
		'payment_status' => false,
		'acceptance_expiry_date' => false,
		'acceptance_date' => false,
		'payment_expiry_date' => false,
		'payment_receipt_date' => false,
		'pay_in_legs' => false,
		'pay_in_method' => false,
		'pay_out_method' => false,
		'uuid' => false,
		'pay_out_instruction' => false,
		'pay_in_instruction' => false,
		'use_pay_in_method' => false,
		'use_pay_out_method' => false,
		'fee' => false,
		'processing_fee' => false,
		'type' => false,
		'net_price' => false,
		'gross_price' => false,
		'amount_in_gross' => false,
		'amount_in_net' => false,
		'fees' => false,
		'date_created' => false,
		'last_updated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'from' => 'from',
        'to' => 'to',
        'amount_in' => 'amountIn',
        'amount_due' => 'amountDue',
        'amount_out' => 'amountOut',
        'price' => 'price',
        'quote_status' => 'quoteStatus',
        'payment_status' => 'paymentStatus',
        'acceptance_expiry_date' => 'acceptanceExpiryDate',
        'acceptance_date' => 'acceptanceDate',
        'payment_expiry_date' => 'paymentExpiryDate',
        'payment_receipt_date' => 'paymentReceiptDate',
        'pay_in_legs' => 'payInLegs',
        'pay_in_method' => 'payInMethod',
        'pay_out_method' => 'payOutMethod',
        'uuid' => 'uuid',
        'pay_out_instruction' => 'payOutInstruction',
        'pay_in_instruction' => 'payInInstruction',
        'use_pay_in_method' => 'usePayInMethod',
        'use_pay_out_method' => 'usePayOutMethod',
        'fee' => 'fee',
        'processing_fee' => 'processingFee',
        'type' => 'type',
        'net_price' => 'netPrice',
        'gross_price' => 'grossPrice',
        'amount_in_gross' => 'amountInGross',
        'amount_in_net' => 'amountInNet',
        'fees' => 'fees',
        'date_created' => 'dateCreated',
        'last_updated' => 'lastUpdated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'from' => 'setFrom',
        'to' => 'setTo',
        'amount_in' => 'setAmountIn',
        'amount_due' => 'setAmountDue',
        'amount_out' => 'setAmountOut',
        'price' => 'setPrice',
        'quote_status' => 'setQuoteStatus',
        'payment_status' => 'setPaymentStatus',
        'acceptance_expiry_date' => 'setAcceptanceExpiryDate',
        'acceptance_date' => 'setAcceptanceDate',
        'payment_expiry_date' => 'setPaymentExpiryDate',
        'payment_receipt_date' => 'setPaymentReceiptDate',
        'pay_in_legs' => 'setPayInLegs',
        'pay_in_method' => 'setPayInMethod',
        'pay_out_method' => 'setPayOutMethod',
        'uuid' => 'setUuid',
        'pay_out_instruction' => 'setPayOutInstruction',
        'pay_in_instruction' => 'setPayInInstruction',
        'use_pay_in_method' => 'setUsePayInMethod',
        'use_pay_out_method' => 'setUsePayOutMethod',
        'fee' => 'setFee',
        'processing_fee' => 'setProcessingFee',
        'type' => 'setType',
        'net_price' => 'setNetPrice',
        'gross_price' => 'setGrossPrice',
        'amount_in_gross' => 'setAmountInGross',
        'amount_in_net' => 'setAmountInNet',
        'fees' => 'setFees',
        'date_created' => 'setDateCreated',
        'last_updated' => 'setLastUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'from' => 'getFrom',
        'to' => 'getTo',
        'amount_in' => 'getAmountIn',
        'amount_due' => 'getAmountDue',
        'amount_out' => 'getAmountOut',
        'price' => 'getPrice',
        'quote_status' => 'getQuoteStatus',
        'payment_status' => 'getPaymentStatus',
        'acceptance_expiry_date' => 'getAcceptanceExpiryDate',
        'acceptance_date' => 'getAcceptanceDate',
        'payment_expiry_date' => 'getPaymentExpiryDate',
        'payment_receipt_date' => 'getPaymentReceiptDate',
        'pay_in_legs' => 'getPayInLegs',
        'pay_in_method' => 'getPayInMethod',
        'pay_out_method' => 'getPayOutMethod',
        'uuid' => 'getUuid',
        'pay_out_instruction' => 'getPayOutInstruction',
        'pay_in_instruction' => 'getPayInInstruction',
        'use_pay_in_method' => 'getUsePayInMethod',
        'use_pay_out_method' => 'getUsePayOutMethod',
        'fee' => 'getFee',
        'processing_fee' => 'getProcessingFee',
        'type' => 'getType',
        'net_price' => 'getNetPrice',
        'gross_price' => 'getGrossPrice',
        'amount_in_gross' => 'getAmountInGross',
        'amount_in_net' => 'getAmountInNet',
        'fees' => 'getFees',
        'date_created' => 'getDateCreated',
        'last_updated' => 'getLastUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const QUOTE_STATUS_ESTIMATE = 'ESTIMATE';
    public const QUOTE_STATUS_TEMPLATE = 'TEMPLATE';
    public const QUOTE_STATUS_PENDING = 'PENDING';
    public const QUOTE_STATUS_ACCEPTED = 'ACCEPTED';
    public const QUOTE_STATUS_PAYMENT_IN_RECEIVED = 'PAYMENT_IN_RECEIVED';
    public const QUOTE_STATUS_PAYMENT_IN_SEEN = 'PAYMENT_IN_SEEN';
    public const QUOTE_STATUS_PAYMENT_IN_FAILED = 'PAYMENT_IN_FAILED';
    public const QUOTE_STATUS_FRAUD_CHECK_PENDING = 'FRAUD_CHECK_PENDING';
    public const QUOTE_STATUS_FRAUD_CHECK_FAILED = 'FRAUD_CHECK_FAILED';
    public const QUOTE_STATUS_PAYMENT_OUT_PENDING = 'PAYMENT_OUT_PENDING';
    public const QUOTE_STATUS_PAYMENT_OUT_PROCESSED = 'PAYMENT_OUT_PROCESSED';
    public const QUOTE_STATUS_PAYMENT_OUT_USED = 'PAYMENT_OUT_USED';
    public const QUOTE_STATUS_COMPLETED = 'COMPLETED';
    public const QUOTE_STATUS_CONVERSION_FAILED = 'CONVERSION_FAILED';
    public const QUOTE_STATUS_PAYMENT_OUT_FAILED = 'PAYMENT_OUT_FAILED';
    public const QUOTE_STATUS_LOCKED = 'LOCKED';
    public const QUOTE_STATUS_REFUNDED = 'REFUNDED';
    public const PAYMENT_STATUS_PENDING = 'PENDING';
    public const PAYMENT_STATUS_SEEN = 'SEEN';
    public const PAYMENT_STATUS_SUCCESS = 'SUCCESS';
    public const PAYMENT_STATUS_CANCELLED = 'CANCELLED';
    public const PAYMENT_STATUS_FAILED = 'FAILED';
    public const PAYMENT_STATUS_FRAUD_PENDING = 'FRAUD_PENDING';
    public const PAYMENT_STATUS_FRAUD_PENDING_MANUAL_REVIEW = 'FRAUD_PENDING_MANUAL_REVIEW';
    public const PAYMENT_STATUS_FRAUD_FAILED = 'FRAUD_FAILED';
    public const PAYMENT_STATUS_REFUND_PENDING = 'REFUND_PENDING';
    public const PAYMENT_STATUS_REFUNDED = 'REFUNDED';
    public const PAYMENT_STATUS_MANUAL_SUCCESS = 'MANUAL_SUCCESS';
    public const PAYMENT_STATUS_REFUND_FAILED = 'REFUND_FAILED';
    public const TYPE_FIXED = 'FIXED';
    public const TYPE_MARKET = 'MARKET';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getQuoteStatusAllowableValues()
    {
        return [
            self::QUOTE_STATUS_ESTIMATE,
            self::QUOTE_STATUS_TEMPLATE,
            self::QUOTE_STATUS_PENDING,
            self::QUOTE_STATUS_ACCEPTED,
            self::QUOTE_STATUS_PAYMENT_IN_RECEIVED,
            self::QUOTE_STATUS_PAYMENT_IN_SEEN,
            self::QUOTE_STATUS_PAYMENT_IN_FAILED,
            self::QUOTE_STATUS_FRAUD_CHECK_PENDING,
            self::QUOTE_STATUS_FRAUD_CHECK_FAILED,
            self::QUOTE_STATUS_PAYMENT_OUT_PENDING,
            self::QUOTE_STATUS_PAYMENT_OUT_PROCESSED,
            self::QUOTE_STATUS_PAYMENT_OUT_USED,
            self::QUOTE_STATUS_COMPLETED,
            self::QUOTE_STATUS_CONVERSION_FAILED,
            self::QUOTE_STATUS_PAYMENT_OUT_FAILED,
            self::QUOTE_STATUS_LOCKED,
            self::QUOTE_STATUS_REFUNDED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_PENDING,
            self::PAYMENT_STATUS_SEEN,
            self::PAYMENT_STATUS_SUCCESS,
            self::PAYMENT_STATUS_CANCELLED,
            self::PAYMENT_STATUS_FAILED,
            self::PAYMENT_STATUS_FRAUD_PENDING,
            self::PAYMENT_STATUS_FRAUD_PENDING_MANUAL_REVIEW,
            self::PAYMENT_STATUS_FRAUD_FAILED,
            self::PAYMENT_STATUS_REFUND_PENDING,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_MANUAL_SUCCESS,
            self::PAYMENT_STATUS_REFUND_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FIXED,
            self::TYPE_MARKET,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('amount_in', $data ?? [], null);
        $this->setIfExists('amount_due', $data ?? [], null);
        $this->setIfExists('amount_out', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('quote_status', $data ?? [], null);
        $this->setIfExists('payment_status', $data ?? [], null);
        $this->setIfExists('acceptance_expiry_date', $data ?? [], null);
        $this->setIfExists('acceptance_date', $data ?? [], null);
        $this->setIfExists('payment_expiry_date', $data ?? [], null);
        $this->setIfExists('payment_receipt_date', $data ?? [], null);
        $this->setIfExists('pay_in_legs', $data ?? [], null);
        $this->setIfExists('pay_in_method', $data ?? [], null);
        $this->setIfExists('pay_out_method', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('pay_out_instruction', $data ?? [], null);
        $this->setIfExists('pay_in_instruction', $data ?? [], null);
        $this->setIfExists('use_pay_in_method', $data ?? [], null);
        $this->setIfExists('use_pay_out_method', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('processing_fee', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('net_price', $data ?? [], null);
        $this->setIfExists('gross_price', $data ?? [], null);
        $this->setIfExists('amount_in_gross', $data ?? [], null);
        $this->setIfExists('amount_in_net', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getQuoteStatusAllowableValues();
        if (!is_null($this->container['quote_status']) && !in_array($this->container['quote_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'quote_status', must be one of '%s'",
                $this->container['quote_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets amount_in
     *
     * @return float|null
     */
    public function getAmountIn()
    {
        return $this->container['amount_in'];
    }

    /**
     * Sets amount_in
     *
     * @param float|null $amount_in amount_in
     *
     * @return self
     */
    public function setAmountIn($amount_in)
    {
        if (is_null($amount_in)) {
            throw new \InvalidArgumentException('non-nullable amount_in cannot be null');
        }
        $this->container['amount_in'] = $amount_in;

        return $this;
    }

    /**
     * Gets amount_due
     *
     * @return float|null
     */
    public function getAmountDue()
    {
        return $this->container['amount_due'];
    }

    /**
     * Sets amount_due
     *
     * @param float|null $amount_due amount_due
     *
     * @return self
     */
    public function setAmountDue($amount_due)
    {
        if (is_null($amount_due)) {
            throw new \InvalidArgumentException('non-nullable amount_due cannot be null');
        }
        $this->container['amount_due'] = $amount_due;

        return $this;
    }

    /**
     * Gets amount_out
     *
     * @return float|null
     */
    public function getAmountOut()
    {
        return $this->container['amount_out'];
    }

    /**
     * Sets amount_out
     *
     * @param float|null $amount_out amount_out
     *
     * @return self
     */
    public function setAmountOut($amount_out)
    {
        if (is_null($amount_out)) {
            throw new \InvalidArgumentException('non-nullable amount_out cannot be null');
        }
        $this->container['amount_out'] = $amount_out;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quote_status
     *
     * @return string|null
     */
    public function getQuoteStatus()
    {
        return $this->container['quote_status'];
    }

    /**
     * Sets quote_status
     *
     * @param string|null $quote_status quote_status
     *
     * @return self
     */
    public function setQuoteStatus($quote_status)
    {
        if (is_null($quote_status)) {
            throw new \InvalidArgumentException('non-nullable quote_status cannot be null');
        }
        $allowedValues = $this->getQuoteStatusAllowableValues();
        if (!in_array($quote_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'quote_status', must be one of '%s'",
                    $quote_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['quote_status'] = $quote_status;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status payment_status
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        if (is_null($payment_status)) {
            throw new \InvalidArgumentException('non-nullable payment_status cannot be null');
        }
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets acceptance_expiry_date
     *
     * @return int|null
     */
    public function getAcceptanceExpiryDate()
    {
        return $this->container['acceptance_expiry_date'];
    }

    /**
     * Sets acceptance_expiry_date
     *
     * @param int|null $acceptance_expiry_date acceptance_expiry_date
     *
     * @return self
     */
    public function setAcceptanceExpiryDate($acceptance_expiry_date)
    {
        if (is_null($acceptance_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable acceptance_expiry_date cannot be null');
        }
        $this->container['acceptance_expiry_date'] = $acceptance_expiry_date;

        return $this;
    }

    /**
     * Gets acceptance_date
     *
     * @return int|null
     */
    public function getAcceptanceDate()
    {
        return $this->container['acceptance_date'];
    }

    /**
     * Sets acceptance_date
     *
     * @param int|null $acceptance_date acceptance_date
     *
     * @return self
     */
    public function setAcceptanceDate($acceptance_date)
    {
        if (is_null($acceptance_date)) {
            throw new \InvalidArgumentException('non-nullable acceptance_date cannot be null');
        }
        $this->container['acceptance_date'] = $acceptance_date;

        return $this;
    }

    /**
     * Gets payment_expiry_date
     *
     * @return int|null
     */
    public function getPaymentExpiryDate()
    {
        return $this->container['payment_expiry_date'];
    }

    /**
     * Sets payment_expiry_date
     *
     * @param int|null $payment_expiry_date payment_expiry_date
     *
     * @return self
     */
    public function setPaymentExpiryDate($payment_expiry_date)
    {
        if (is_null($payment_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable payment_expiry_date cannot be null');
        }
        $this->container['payment_expiry_date'] = $payment_expiry_date;

        return $this;
    }

    /**
     * Gets payment_receipt_date
     *
     * @return int|null
     */
    public function getPaymentReceiptDate()
    {
        return $this->container['payment_receipt_date'];
    }

    /**
     * Sets payment_receipt_date
     *
     * @param int|null $payment_receipt_date payment_receipt_date
     *
     * @return self
     */
    public function setPaymentReceiptDate($payment_receipt_date)
    {
        if (is_null($payment_receipt_date)) {
            throw new \InvalidArgumentException('non-nullable payment_receipt_date cannot be null');
        }
        $this->container['payment_receipt_date'] = $payment_receipt_date;

        return $this;
    }

    /**
     * Gets pay_in_legs
     *
     * @return \OpenAPI\Client\Model\PaymentLeg[]|null
     */
    public function getPayInLegs()
    {
        return $this->container['pay_in_legs'];
    }

    /**
     * Sets pay_in_legs
     *
     * @param \OpenAPI\Client\Model\PaymentLeg[]|null $pay_in_legs pay_in_legs
     *
     * @return self
     */
    public function setPayInLegs($pay_in_legs)
    {
        if (is_null($pay_in_legs)) {
            throw new \InvalidArgumentException('non-nullable pay_in_legs cannot be null');
        }
        $this->container['pay_in_legs'] = $pay_in_legs;

        return $this;
    }

    /**
     * Gets pay_in_method
     *
     * @return \OpenAPI\Client\Model\PayInMethod|null
     */
    public function getPayInMethod()
    {
        return $this->container['pay_in_method'];
    }

    /**
     * Sets pay_in_method
     *
     * @param \OpenAPI\Client\Model\PayInMethod|null $pay_in_method pay_in_method
     *
     * @return self
     */
    public function setPayInMethod($pay_in_method)
    {
        if (is_null($pay_in_method)) {
            throw new \InvalidArgumentException('non-nullable pay_in_method cannot be null');
        }
        $this->container['pay_in_method'] = $pay_in_method;

        return $this;
    }

    /**
     * Gets pay_out_method
     *
     * @return \OpenAPI\Client\Model\PayOutMethod|null
     */
    public function getPayOutMethod()
    {
        return $this->container['pay_out_method'];
    }

    /**
     * Sets pay_out_method
     *
     * @param \OpenAPI\Client\Model\PayOutMethod|null $pay_out_method pay_out_method
     *
     * @return self
     */
    public function setPayOutMethod($pay_out_method)
    {
        if (is_null($pay_out_method)) {
            throw new \InvalidArgumentException('non-nullable pay_out_method cannot be null');
        }
        $this->container['pay_out_method'] = $pay_out_method;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets pay_out_instruction
     *
     * @return \OpenAPI\Client\Model\PayOutInstruction|null
     */
    public function getPayOutInstruction()
    {
        return $this->container['pay_out_instruction'];
    }

    /**
     * Sets pay_out_instruction
     *
     * @param \OpenAPI\Client\Model\PayOutInstruction|null $pay_out_instruction pay_out_instruction
     *
     * @return self
     */
    public function setPayOutInstruction($pay_out_instruction)
    {
        if (is_null($pay_out_instruction)) {
            throw new \InvalidArgumentException('non-nullable pay_out_instruction cannot be null');
        }
        $this->container['pay_out_instruction'] = $pay_out_instruction;

        return $this;
    }

    /**
     * Gets pay_in_instruction
     *
     * @return \OpenAPI\Client\Model\PayInInstruction|null
     */
    public function getPayInInstruction()
    {
        return $this->container['pay_in_instruction'];
    }

    /**
     * Sets pay_in_instruction
     *
     * @param \OpenAPI\Client\Model\PayInInstruction|null $pay_in_instruction pay_in_instruction
     *
     * @return self
     */
    public function setPayInInstruction($pay_in_instruction)
    {
        if (is_null($pay_in_instruction)) {
            throw new \InvalidArgumentException('non-nullable pay_in_instruction cannot be null');
        }
        $this->container['pay_in_instruction'] = $pay_in_instruction;

        return $this;
    }

    /**
     * Gets use_pay_in_method
     *
     * @return \OpenAPI\Client\Model\AccountMethod|null
     */
    public function getUsePayInMethod()
    {
        return $this->container['use_pay_in_method'];
    }

    /**
     * Sets use_pay_in_method
     *
     * @param \OpenAPI\Client\Model\AccountMethod|null $use_pay_in_method use_pay_in_method
     *
     * @return self
     */
    public function setUsePayInMethod($use_pay_in_method)
    {
        if (is_null($use_pay_in_method)) {
            throw new \InvalidArgumentException('non-nullable use_pay_in_method cannot be null');
        }
        $this->container['use_pay_in_method'] = $use_pay_in_method;

        return $this;
    }

    /**
     * Gets use_pay_out_method
     *
     * @return \OpenAPI\Client\Model\AccountMethod|null
     */
    public function getUsePayOutMethod()
    {
        return $this->container['use_pay_out_method'];
    }

    /**
     * Sets use_pay_out_method
     *
     * @param \OpenAPI\Client\Model\AccountMethod|null $use_pay_out_method use_pay_out_method
     *
     * @return self
     */
    public function setUsePayOutMethod($use_pay_out_method)
    {
        if (is_null($use_pay_out_method)) {
            throw new \InvalidArgumentException('non-nullable use_pay_out_method cannot be null');
        }
        $this->container['use_pay_out_method'] = $use_pay_out_method;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float|null $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets processing_fee
     *
     * @return float|null
     */
    public function getProcessingFee()
    {
        return $this->container['processing_fee'];
    }

    /**
     * Sets processing_fee
     *
     * @param float|null $processing_fee processing_fee
     *
     * @return self
     */
    public function setProcessingFee($processing_fee)
    {
        if (is_null($processing_fee)) {
            throw new \InvalidArgumentException('non-nullable processing_fee cannot be null');
        }
        $this->container['processing_fee'] = $processing_fee;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets net_price
     *
     * @return float|null
     */
    public function getNetPrice()
    {
        return $this->container['net_price'];
    }

    /**
     * Sets net_price
     *
     * @param float|null $net_price net_price
     *
     * @return self
     */
    public function setNetPrice($net_price)
    {
        if (is_null($net_price)) {
            throw new \InvalidArgumentException('non-nullable net_price cannot be null');
        }
        $this->container['net_price'] = $net_price;

        return $this;
    }

    /**
     * Gets gross_price
     *
     * @return float|null
     */
    public function getGrossPrice()
    {
        return $this->container['gross_price'];
    }

    /**
     * Sets gross_price
     *
     * @param float|null $gross_price gross_price
     *
     * @return self
     */
    public function setGrossPrice($gross_price)
    {
        if (is_null($gross_price)) {
            throw new \InvalidArgumentException('non-nullable gross_price cannot be null');
        }
        $this->container['gross_price'] = $gross_price;

        return $this;
    }

    /**
     * Gets amount_in_gross
     *
     * @return float|null
     */
    public function getAmountInGross()
    {
        return $this->container['amount_in_gross'];
    }

    /**
     * Sets amount_in_gross
     *
     * @param float|null $amount_in_gross amount_in_gross
     *
     * @return self
     */
    public function setAmountInGross($amount_in_gross)
    {
        if (is_null($amount_in_gross)) {
            throw new \InvalidArgumentException('non-nullable amount_in_gross cannot be null');
        }
        $this->container['amount_in_gross'] = $amount_in_gross;

        return $this;
    }

    /**
     * Gets amount_in_net
     *
     * @return float|null
     */
    public function getAmountInNet()
    {
        return $this->container['amount_in_net'];
    }

    /**
     * Sets amount_in_net
     *
     * @param float|null $amount_in_net amount_in_net
     *
     * @return self
     */
    public function setAmountInNet($amount_in_net)
    {
        if (is_null($amount_in_net)) {
            throw new \InvalidArgumentException('non-nullable amount_in_net cannot be null');
        }
        $this->container['amount_in_net'] = $amount_in_net;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\Fees|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\Fees|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return int|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param int|null $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


