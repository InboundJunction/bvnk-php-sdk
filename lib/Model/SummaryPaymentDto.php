<?php
/**
 * SummaryPaymentDto
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, and digital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SummaryPaymentDto Class Doc Comment
 *
 * @category Class
 * @description Contains all the information about a summary payment object returned.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SummaryPaymentDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SummaryPaymentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'merchant_display_name' => 'string',
        'merchant_id' => 'string',
        'date_created' => 'int',
        'expiry_date' => 'int',
        'quote_expiry_date' => 'int',
        'acceptance_expiry_date' => 'int',
        'quote_status' => 'string',
        'reference' => 'string',
        'type' => '\OpenAPI\Client\Model\DirectionDto',
        'sub_type' => 'string',
        'status' => '\OpenAPI\Client\Model\PaymentStatusDto',
        'display_currency' => '\OpenAPI\Client\Model\PayAmountsDto',
        'wallet_currency' => '\OpenAPI\Client\Model\PayAmountsDto',
        'paid_currency' => '\OpenAPI\Client\Model\PayAmountsDto',
        'fee_currency' => '\OpenAPI\Client\Model\PayAmountsDto',
        'display_rate' => '\OpenAPI\Client\Model\ExchangeRateDto',
        'exchange_rate' => '\OpenAPI\Client\Model\ExchangeRateDto',
        'address' => '\OpenAPI\Client\Model\CryptoAddressDto',
        'return_url' => 'string',
        'redirect_url' => 'string',
        'transactions' => '\OpenAPI\Client\Model\GatewayTransactionDto[]',
        'refund' => 'object',
        'refunds' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => null,
        'merchant_display_name' => null,
        'merchant_id' => null,
        'date_created' => 'int64',
        'expiry_date' => 'int64',
        'quote_expiry_date' => 'int64',
        'acceptance_expiry_date' => 'int64',
        'quote_status' => null,
        'reference' => null,
        'type' => null,
        'sub_type' => null,
        'status' => null,
        'display_currency' => null,
        'wallet_currency' => null,
        'paid_currency' => null,
        'fee_currency' => null,
        'display_rate' => null,
        'exchange_rate' => null,
        'address' => null,
        'return_url' => null,
        'redirect_url' => null,
        'transactions' => null,
        'refund' => null,
        'refunds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => false,
		'merchant_display_name' => false,
		'merchant_id' => false,
		'date_created' => false,
		'expiry_date' => false,
		'quote_expiry_date' => false,
		'acceptance_expiry_date' => false,
		'quote_status' => false,
		'reference' => false,
		'type' => false,
		'sub_type' => false,
		'status' => false,
		'display_currency' => false,
		'wallet_currency' => false,
		'paid_currency' => false,
		'fee_currency' => false,
		'display_rate' => false,
		'exchange_rate' => false,
		'address' => false,
		'return_url' => false,
		'redirect_url' => false,
		'transactions' => false,
		'refund' => false,
		'refunds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'merchant_display_name' => 'merchantDisplayName',
        'merchant_id' => 'merchantId',
        'date_created' => 'dateCreated',
        'expiry_date' => 'expiryDate',
        'quote_expiry_date' => 'quoteExpiryDate',
        'acceptance_expiry_date' => 'acceptanceExpiryDate',
        'quote_status' => 'quoteStatus',
        'reference' => 'reference',
        'type' => 'type',
        'sub_type' => 'subType',
        'status' => 'status',
        'display_currency' => 'displayCurrency',
        'wallet_currency' => 'walletCurrency',
        'paid_currency' => 'paidCurrency',
        'fee_currency' => 'feeCurrency',
        'display_rate' => 'displayRate',
        'exchange_rate' => 'exchangeRate',
        'address' => 'address',
        'return_url' => 'returnUrl',
        'redirect_url' => 'redirectUrl',
        'transactions' => 'transactions',
        'refund' => 'refund',
        'refunds' => 'refunds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'merchant_display_name' => 'setMerchantDisplayName',
        'merchant_id' => 'setMerchantId',
        'date_created' => 'setDateCreated',
        'expiry_date' => 'setExpiryDate',
        'quote_expiry_date' => 'setQuoteExpiryDate',
        'acceptance_expiry_date' => 'setAcceptanceExpiryDate',
        'quote_status' => 'setQuoteStatus',
        'reference' => 'setReference',
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'status' => 'setStatus',
        'display_currency' => 'setDisplayCurrency',
        'wallet_currency' => 'setWalletCurrency',
        'paid_currency' => 'setPaidCurrency',
        'fee_currency' => 'setFeeCurrency',
        'display_rate' => 'setDisplayRate',
        'exchange_rate' => 'setExchangeRate',
        'address' => 'setAddress',
        'return_url' => 'setReturnUrl',
        'redirect_url' => 'setRedirectUrl',
        'transactions' => 'setTransactions',
        'refund' => 'setRefund',
        'refunds' => 'setRefunds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'merchant_display_name' => 'getMerchantDisplayName',
        'merchant_id' => 'getMerchantId',
        'date_created' => 'getDateCreated',
        'expiry_date' => 'getExpiryDate',
        'quote_expiry_date' => 'getQuoteExpiryDate',
        'acceptance_expiry_date' => 'getAcceptanceExpiryDate',
        'quote_status' => 'getQuoteStatus',
        'reference' => 'getReference',
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'status' => 'getStatus',
        'display_currency' => 'getDisplayCurrency',
        'wallet_currency' => 'getWalletCurrency',
        'paid_currency' => 'getPaidCurrency',
        'fee_currency' => 'getFeeCurrency',
        'display_rate' => 'getDisplayRate',
        'exchange_rate' => 'getExchangeRate',
        'address' => 'getAddress',
        'return_url' => 'getReturnUrl',
        'redirect_url' => 'getRedirectUrl',
        'transactions' => 'getTransactions',
        'refund' => 'getRefund',
        'refunds' => 'getRefunds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SUB_TYPE_MERCHANT_PAY_IN = 'merchantPayIn';
    public const SUB_TYPE_MERCHANT_PAY_OUT = 'merchantPayOut';
    public const SUB_TYPE_MERCHANT_REFUND = 'merchantRefund';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubTypeAllowableValues()
    {
        return [
            self::SUB_TYPE_MERCHANT_PAY_IN,
            self::SUB_TYPE_MERCHANT_PAY_OUT,
            self::SUB_TYPE_MERCHANT_REFUND,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('merchant_display_name', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('expiry_date', $data ?? [], null);
        $this->setIfExists('quote_expiry_date', $data ?? [], null);
        $this->setIfExists('acceptance_expiry_date', $data ?? [], null);
        $this->setIfExists('quote_status', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('sub_type', $data ?? [], 'merchantPayIn');
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('display_currency', $data ?? [], null);
        $this->setIfExists('wallet_currency', $data ?? [], null);
        $this->setIfExists('paid_currency', $data ?? [], null);
        $this->setIfExists('fee_currency', $data ?? [], null);
        $this->setIfExists('display_rate', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('return_url', $data ?? [], null);
        $this->setIfExists('redirect_url', $data ?? [], null);
        $this->setIfExists('transactions', $data ?? [], null);
        $this->setIfExists('refund', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSubTypeAllowableValues();
        if (!is_null($this->container['sub_type']) && !in_array($this->container['sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sub_type', must be one of '%s'",
                $this->container['sub_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid The unique identifier for the merchant payment.
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets merchant_display_name
     *
     * @return string|null
     */
    public function getMerchantDisplayName()
    {
        return $this->container['merchant_display_name'];
    }

    /**
     * Sets merchant_display_name
     *
     * @param string|null $merchant_display_name The display name for the merchant payment.
     *
     * @return self
     */
    public function setMerchantDisplayName($merchant_display_name)
    {
        if (is_null($merchant_display_name)) {
            throw new \InvalidArgumentException('non-nullable merchant_display_name cannot be null');
        }
        $this->container['merchant_display_name'] = $merchant_display_name;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string|null
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string|null $merchant_id The Merchant ID. You can find it on the Merchant Details page in your account.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return int|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param int|null $date_created The date and time, encoded into UNIX epoch timestamps.
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return int|null
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param int|null $expiry_date The date and time, encoded into UNIX epoch timestamps
     *
     * @return self
     */
    public function setExpiryDate($expiry_date)
    {
        if (is_null($expiry_date)) {
            throw new \InvalidArgumentException('non-nullable expiry_date cannot be null');
        }
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets quote_expiry_date
     *
     * @return int|null
     */
    public function getQuoteExpiryDate()
    {
        return $this->container['quote_expiry_date'];
    }

    /**
     * Sets quote_expiry_date
     *
     * @param int|null $quote_expiry_date The date and time, encoded into UNIX epoch timestamps
     *
     * @return self
     */
    public function setQuoteExpiryDate($quote_expiry_date)
    {
        if (is_null($quote_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable quote_expiry_date cannot be null');
        }
        $this->container['quote_expiry_date'] = $quote_expiry_date;

        return $this;
    }

    /**
     * Gets acceptance_expiry_date
     *
     * @return int|null
     */
    public function getAcceptanceExpiryDate()
    {
        return $this->container['acceptance_expiry_date'];
    }

    /**
     * Sets acceptance_expiry_date
     *
     * @param int|null $acceptance_expiry_date The date and time, encoded into UNIX epoch timestamps
     *
     * @return self
     */
    public function setAcceptanceExpiryDate($acceptance_expiry_date)
    {
        if (is_null($acceptance_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable acceptance_expiry_date cannot be null');
        }
        $this->container['acceptance_expiry_date'] = $acceptance_expiry_date;

        return $this;
    }

    /**
     * Gets quote_status
     *
     * @return string|null
     */
    public function getQuoteStatus()
    {
        return $this->container['quote_status'];
    }

    /**
     * Sets quote_status
     *
     * @param string|null $quote_status quote_status
     *
     * @return self
     */
    public function setQuoteStatus($quote_status)
    {
        if (is_null($quote_status)) {
            throw new \InvalidArgumentException('non-nullable quote_status cannot be null');
        }
        $this->container['quote_status'] = $quote_status;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference The custom payment reference ID to tie the payment to your customer.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DirectionDto|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DirectionDto|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string|null $sub_type The payment sub type
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        if (is_null($sub_type)) {
            throw new \InvalidArgumentException('non-nullable sub_type cannot be null');
        }
        $allowedValues = $this->getSubTypeAllowableValues();
        if (!in_array($sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sub_type', must be one of '%s'",
                    $sub_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\PaymentStatusDto|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\PaymentStatusDto|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets display_currency
     *
     * @return \OpenAPI\Client\Model\PayAmountsDto|null
     */
    public function getDisplayCurrency()
    {
        return $this->container['display_currency'];
    }

    /**
     * Sets display_currency
     *
     * @param \OpenAPI\Client\Model\PayAmountsDto|null $display_currency display_currency
     *
     * @return self
     */
    public function setDisplayCurrency($display_currency)
    {
        if (is_null($display_currency)) {
            throw new \InvalidArgumentException('non-nullable display_currency cannot be null');
        }
        $this->container['display_currency'] = $display_currency;

        return $this;
    }

    /**
     * Gets wallet_currency
     *
     * @return \OpenAPI\Client\Model\PayAmountsDto|null
     */
    public function getWalletCurrency()
    {
        return $this->container['wallet_currency'];
    }

    /**
     * Sets wallet_currency
     *
     * @param \OpenAPI\Client\Model\PayAmountsDto|null $wallet_currency wallet_currency
     *
     * @return self
     */
    public function setWalletCurrency($wallet_currency)
    {
        if (is_null($wallet_currency)) {
            throw new \InvalidArgumentException('non-nullable wallet_currency cannot be null');
        }
        $this->container['wallet_currency'] = $wallet_currency;

        return $this;
    }

    /**
     * Gets paid_currency
     *
     * @return \OpenAPI\Client\Model\PayAmountsDto|null
     */
    public function getPaidCurrency()
    {
        return $this->container['paid_currency'];
    }

    /**
     * Sets paid_currency
     *
     * @param \OpenAPI\Client\Model\PayAmountsDto|null $paid_currency paid_currency
     *
     * @return self
     */
    public function setPaidCurrency($paid_currency)
    {
        if (is_null($paid_currency)) {
            throw new \InvalidArgumentException('non-nullable paid_currency cannot be null');
        }
        $this->container['paid_currency'] = $paid_currency;

        return $this;
    }

    /**
     * Gets fee_currency
     *
     * @return \OpenAPI\Client\Model\PayAmountsDto|null
     */
    public function getFeeCurrency()
    {
        return $this->container['fee_currency'];
    }

    /**
     * Sets fee_currency
     *
     * @param \OpenAPI\Client\Model\PayAmountsDto|null $fee_currency fee_currency
     *
     * @return self
     */
    public function setFeeCurrency($fee_currency)
    {
        if (is_null($fee_currency)) {
            throw new \InvalidArgumentException('non-nullable fee_currency cannot be null');
        }
        $this->container['fee_currency'] = $fee_currency;

        return $this;
    }

    /**
     * Gets display_rate
     *
     * @return \OpenAPI\Client\Model\ExchangeRateDto|null
     */
    public function getDisplayRate()
    {
        return $this->container['display_rate'];
    }

    /**
     * Sets display_rate
     *
     * @param \OpenAPI\Client\Model\ExchangeRateDto|null $display_rate display_rate
     *
     * @return self
     */
    public function setDisplayRate($display_rate)
    {
        if (is_null($display_rate)) {
            throw new \InvalidArgumentException('non-nullable display_rate cannot be null');
        }
        $this->container['display_rate'] = $display_rate;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return \OpenAPI\Client\Model\ExchangeRateDto|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param \OpenAPI\Client\Model\ExchangeRateDto|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\CryptoAddressDto|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\CryptoAddressDto|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets return_url
     *
     * @return string|null
     */
    public function getReturnUrl()
    {
        return $this->container['return_url'];
    }

    /**
     * Sets return_url
     *
     * @param string|null $return_url The URL that the customer will be redirected to if they click 'Back to Merchant' button on the payment web page.
     *
     * @return self
     */
    public function setReturnUrl($return_url)
    {
        if (is_null($return_url)) {
            throw new \InvalidArgumentException('non-nullable return_url cannot be null');
        }
        $this->container['return_url'] = $return_url;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string|null $redirect_url The URL to the payment page that you redirect your customers to.
     *
     * @return self
     */
    public function setRedirectUrl($redirect_url)
    {
        if (is_null($redirect_url)) {
            throw new \InvalidArgumentException('non-nullable redirect_url cannot be null');
        }
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \OpenAPI\Client\Model\GatewayTransactionDto[]|null
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \OpenAPI\Client\Model\GatewayTransactionDto[]|null $transactions transactions
     *
     * @return self
     */
    public function setTransactions($transactions)
    {
        if (is_null($transactions)) {
            throw new \InvalidArgumentException('non-nullable transactions cannot be null');
        }
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return object|null
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param object|null $refund The payment this object is a refund of. This should reference the pay in that this refund was created for.
     *
     * @return self
     */
    public function setRefund($refund)
    {
        if (is_null($refund)) {
            throw new \InvalidArgumentException('non-nullable refund cannot be null');
        }
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return object[]|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param object[]|null $refunds Refunds that have been requested for this payment. This should reference the refund payout for this pay in.
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


