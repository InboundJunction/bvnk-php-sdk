<?php
/**
 * Currency
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BVNK API Endpoints
 *
 * The BVNK API is designed to facilitate seamless and secure transactions including payments, channels, anddigital wallet transactions.
 *
 * The version of the OpenAPI document: 1.0.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Currency Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Currency implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Currency';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'deposit_fee' => 'float',
        'fiat' => 'bool',
        'icon' => 'string',
        'id' => 'int',
        'name' => 'string',
        'options' => '\OpenAPI\Client\Model\CurrencyOptions',
        'price_precision' => 'int',
        'protocols' => '\OpenAPI\Client\Model\CurrencyProtocol[]',
        'quantity_precision' => 'int',
        'supports_deposits' => 'bool',
        'supports_withdrawals' => 'bool',
        'withdrawal_fee' => 'float',
        'withdrawal_parameters' => '\OpenAPI\Client\Model\ExternalCurrencyWithdrawalParameter[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'deposit_fee' => null,
        'fiat' => null,
        'icon' => null,
        'id' => 'int64',
        'name' => null,
        'options' => null,
        'price_precision' => 'int32',
        'protocols' => null,
        'quantity_precision' => 'int32',
        'supports_deposits' => null,
        'supports_withdrawals' => null,
        'withdrawal_fee' => null,
        'withdrawal_parameters' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
		'deposit_fee' => false,
		'fiat' => false,
		'icon' => false,
		'id' => false,
		'name' => false,
		'options' => false,
		'price_precision' => false,
		'protocols' => false,
		'quantity_precision' => false,
		'supports_deposits' => false,
		'supports_withdrawals' => false,
		'withdrawal_fee' => false,
		'withdrawal_parameters' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'deposit_fee' => 'depositFee',
        'fiat' => 'fiat',
        'icon' => 'icon',
        'id' => 'id',
        'name' => 'name',
        'options' => 'options',
        'price_precision' => 'pricePrecision',
        'protocols' => 'protocols',
        'quantity_precision' => 'quantityPrecision',
        'supports_deposits' => 'supportsDeposits',
        'supports_withdrawals' => 'supportsWithdrawals',
        'withdrawal_fee' => 'withdrawalFee',
        'withdrawal_parameters' => 'withdrawalParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'deposit_fee' => 'setDepositFee',
        'fiat' => 'setFiat',
        'icon' => 'setIcon',
        'id' => 'setId',
        'name' => 'setName',
        'options' => 'setOptions',
        'price_precision' => 'setPricePrecision',
        'protocols' => 'setProtocols',
        'quantity_precision' => 'setQuantityPrecision',
        'supports_deposits' => 'setSupportsDeposits',
        'supports_withdrawals' => 'setSupportsWithdrawals',
        'withdrawal_fee' => 'setWithdrawalFee',
        'withdrawal_parameters' => 'setWithdrawalParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'deposit_fee' => 'getDepositFee',
        'fiat' => 'getFiat',
        'icon' => 'getIcon',
        'id' => 'getId',
        'name' => 'getName',
        'options' => 'getOptions',
        'price_precision' => 'getPricePrecision',
        'protocols' => 'getProtocols',
        'quantity_precision' => 'getQuantityPrecision',
        'supports_deposits' => 'getSupportsDeposits',
        'supports_withdrawals' => 'getSupportsWithdrawals',
        'withdrawal_fee' => 'getWithdrawalFee',
        'withdrawal_parameters' => 'getWithdrawalParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('deposit_fee', $data ?? [], null);
        $this->setIfExists('fiat', $data ?? [], false);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('price_precision', $data ?? [], 5);
        $this->setIfExists('protocols', $data ?? [], null);
        $this->setIfExists('quantity_precision', $data ?? [], 5);
        $this->setIfExists('supports_deposits', $data ?? [], false);
        $this->setIfExists('supports_withdrawals', $data ?? [], false);
        $this->setIfExists('withdrawal_fee', $data ?? [], null);
        $this->setIfExists('withdrawal_parameters', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets deposit_fee
     *
     * @return float|null
     */
    public function getDepositFee()
    {
        return $this->container['deposit_fee'];
    }

    /**
     * Sets deposit_fee
     *
     * @param float|null $deposit_fee deposit_fee
     *
     * @return self
     */
    public function setDepositFee($deposit_fee)
    {
        if (is_null($deposit_fee)) {
            throw new \InvalidArgumentException('non-nullable deposit_fee cannot be null');
        }
        $this->container['deposit_fee'] = $deposit_fee;

        return $this;
    }

    /**
     * Gets fiat
     *
     * @return bool|null
     */
    public function getFiat()
    {
        return $this->container['fiat'];
    }

    /**
     * Sets fiat
     *
     * @param bool|null $fiat fiat
     *
     * @return self
     */
    public function setFiat($fiat)
    {
        if (is_null($fiat)) {
            throw new \InvalidArgumentException('non-nullable fiat cannot be null');
        }
        $this->container['fiat'] = $fiat;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\CurrencyOptions|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\CurrencyOptions|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets price_precision
     *
     * @return int|null
     */
    public function getPricePrecision()
    {
        return $this->container['price_precision'];
    }

    /**
     * Sets price_precision
     *
     * @param int|null $price_precision price_precision
     *
     * @return self
     */
    public function setPricePrecision($price_precision)
    {
        if (is_null($price_precision)) {
            throw new \InvalidArgumentException('non-nullable price_precision cannot be null');
        }
        $this->container['price_precision'] = $price_precision;

        return $this;
    }

    /**
     * Gets protocols
     *
     * @return \OpenAPI\Client\Model\CurrencyProtocol[]|null
     */
    public function getProtocols()
    {
        return $this->container['protocols'];
    }

    /**
     * Sets protocols
     *
     * @param \OpenAPI\Client\Model\CurrencyProtocol[]|null $protocols protocols
     *
     * @return self
     */
    public function setProtocols($protocols)
    {
        if (is_null($protocols)) {
            throw new \InvalidArgumentException('non-nullable protocols cannot be null');
        }
        $this->container['protocols'] = $protocols;

        return $this;
    }

    /**
     * Gets quantity_precision
     *
     * @return int|null
     */
    public function getQuantityPrecision()
    {
        return $this->container['quantity_precision'];
    }

    /**
     * Sets quantity_precision
     *
     * @param int|null $quantity_precision quantity_precision
     *
     * @return self
     */
    public function setQuantityPrecision($quantity_precision)
    {
        if (is_null($quantity_precision)) {
            throw new \InvalidArgumentException('non-nullable quantity_precision cannot be null');
        }
        $this->container['quantity_precision'] = $quantity_precision;

        return $this;
    }

    /**
     * Gets supports_deposits
     *
     * @return bool|null
     */
    public function getSupportsDeposits()
    {
        return $this->container['supports_deposits'];
    }

    /**
     * Sets supports_deposits
     *
     * @param bool|null $supports_deposits supports_deposits
     *
     * @return self
     */
    public function setSupportsDeposits($supports_deposits)
    {
        if (is_null($supports_deposits)) {
            throw new \InvalidArgumentException('non-nullable supports_deposits cannot be null');
        }
        $this->container['supports_deposits'] = $supports_deposits;

        return $this;
    }

    /**
     * Gets supports_withdrawals
     *
     * @return bool|null
     */
    public function getSupportsWithdrawals()
    {
        return $this->container['supports_withdrawals'];
    }

    /**
     * Sets supports_withdrawals
     *
     * @param bool|null $supports_withdrawals supports_withdrawals
     *
     * @return self
     */
    public function setSupportsWithdrawals($supports_withdrawals)
    {
        if (is_null($supports_withdrawals)) {
            throw new \InvalidArgumentException('non-nullable supports_withdrawals cannot be null');
        }
        $this->container['supports_withdrawals'] = $supports_withdrawals;

        return $this;
    }

    /**
     * Gets withdrawal_fee
     *
     * @return float|null
     */
    public function getWithdrawalFee()
    {
        return $this->container['withdrawal_fee'];
    }

    /**
     * Sets withdrawal_fee
     *
     * @param float|null $withdrawal_fee withdrawal_fee
     *
     * @return self
     */
    public function setWithdrawalFee($withdrawal_fee)
    {
        if (is_null($withdrawal_fee)) {
            throw new \InvalidArgumentException('non-nullable withdrawal_fee cannot be null');
        }
        $this->container['withdrawal_fee'] = $withdrawal_fee;

        return $this;
    }

    /**
     * Gets withdrawal_parameters
     *
     * @return \OpenAPI\Client\Model\ExternalCurrencyWithdrawalParameter[]|null
     */
    public function getWithdrawalParameters()
    {
        return $this->container['withdrawal_parameters'];
    }

    /**
     * Sets withdrawal_parameters
     *
     * @param \OpenAPI\Client\Model\ExternalCurrencyWithdrawalParameter[]|null $withdrawal_parameters withdrawal_parameters
     *
     * @return self
     */
    public function setWithdrawalParameters($withdrawal_parameters)
    {
        if (is_null($withdrawal_parameters)) {
            throw new \InvalidArgumentException('non-nullable withdrawal_parameters cannot be null');
        }
        $this->container['withdrawal_parameters'] = $withdrawal_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


